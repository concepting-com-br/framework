<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE artifacts>
 
<artifacts>
	<artifact packageName="br.com.innovativethinking.framework.service.util.ServiceUtil.getServicePackageByModel(#{clazz})"
	          name="br.com.innovativethinking.framework.service.util.ServiceUtil.getServiceNameByModel(#{clazz})">
		package @{packageName};
	    <set var="userPropertyInfo" value="#{declaration}.getPropertyInfo('input')"/>
		<set var="userModelClass" value="@{userPropertyInfo.clazz}"/>
		<set var="userModelInfo" value="br.com.innovativethinking.framework.model.util.ModelUtil.getInfo(@{userModelClass})"/>
		<set var="userModelClassName" value="@{userModelClass.name}"/>
		<set var="userModelName" value="@{userModelClass.simpleName}"/>
	    <set var="userServiceInterfaceClassName" value="br.com.innovativethinking.framework.service.util.ServiceUtil.getServiceInterfaceClassNameByModel(@{userModelClass})"/>
	    <set var="userServiceInterfaceName" value="br.com.innovativethinking.framework.service.util.ServiceUtil.getServiceInterfaceNameByModel(@{userModelClass})"/>
	    <set var="loginParameterPropertyInfo" value="@{userModelInfo}.getPropertyInfo('loginParameter')"/>
	    <set var="loginParameterModelClass" value="@{loginParameterPropertyInfo.clazz}"/>
	    <set var="loginParameterModelClassName" value="@{loginParameterModelClass.name}"/>
	    <set var="loginParameterModelName" value="@{loginParameterModelClass.simpleName}"/>
		<set var="interfaceClassName" value="br.com.innovativethinking.framework.service.util.ServiceUtil.getServiceInterfaceClassNameByModel(#{clazz})"/>
		<set var="interfaceName" value="br.com.innovativethinking.framework.service.util.ServiceUtil.getServiceInterfaceNameByModel(#{clazz})"/>
		
		import br.com.innovativethinking.framework.exceptions.InternalErrorException;
		import br.com.innovativethinking.framework.model.exceptions.ItemAlreadyExistsException;
		import br.com.innovativethinking.framework.resources.exceptions.InvalidResourcesException;
		import br.com.innovativethinking.framework.security.exceptions.PasswordsNotMatchException;
		import br.com.innovativethinking.framework.security.exceptions.PasswordWithoutMinimumLengthException;
		import br.com.innovativethinking.framework.security.exceptions.PasswordIsNotStrongException;
		import br.com.innovativethinking.framework.security.util.SecurityUtil;
		import br.com.innovativethinking.framework.service.BaseService;
		import br.com.innovativethinking.framework.service.annotations.Service;
		import br.com.innovativethinking.framework.util.DateTimeUtil;
		import br.com.innovativethinking.framework.util.helpers.DateTime;
		import br.com.innovativethinking.framework.util.types.DateFieldType;
		
		import #{clazz.name};
		import @{userModelClassName};
		import @{loginParameterModelClassName};
		import @{interfaceClassName};
		import @{userServiceInterfaceClassName};
		
		/**
		 * Class that defines the service of the user administration UI.
		 *
		 * @author @{user.name}
		 * @version @{build.version}
		 * @since @{now}
		 */
		@Service
		public class @{name} extends BaseService&lt;#{clazz.simpleName}&gt; implements @{interfaceName}{
		    /**
		     * @see @{interfaceClassName}#updateExpirePasswordDateTime(@{userModelClassName})
		     */
			public void updateExpirePasswordDateTime(@{userModelName} user) throws InternalErrorException{
		        DateTime lastUpdate = (user != null &amp;&amp; user.getLastUpdate() != null ? user.getLastUpdate() : new DateTime());
		        @{loginParameterModelName} loginParameter = (user != null ? user.getLoginParameter() : null);
		        Integer expirePasswordInterval = (loginParameter != null ? loginParameter.getExpirePasswordInterval() : null);
		        
		        if(expirePasswordInterval != null){
		            DateTime expirePasswordDateTime = DateTimeUtil.add(lastUpdate, expirePasswordInterval, DateFieldType.DAYS);
		            
		            loginParameter.setExpirePasswordDateTime(expirePasswordDateTime);
		        }
			}
			
		    /**
		     * @see @{interfaceClassName}#saveUser(@{userModelClassName})
		     */
			public void saveUser(@{userModelName} user) throws ItemAlreadyExistsException, PasswordsNotMatchException, PasswordWithoutMinimumLengthException, PasswordIsNotStrongException, InternalErrorException{
				String newPassword = user.getNewPassword();
				String confirmPassword = user.getConfirmPassword();
				
		        if(newPassword != null &amp;&amp; confirmPassword != null &amp;&amp; !newPassword.equals(confirmPassword))
		            throw new PasswordsNotMatchException();
		        
		        if(newPassword != null &amp;&amp; newPassword.length() > 0){
					@{loginParameterModelName} loginParameter = user.getLoginParameter();

		            if(loginParameter != null){
		                if(newPassword.length() &lt; loginParameter.getMinimumPasswordLength())
		                    throw new PasswordWithoutMinimumLengthException(loginParameter.getMinimumPasswordLength(), loginParameter.getMinimumPasswordLength());
		
		                if(loginParameter.useStrongPassword() &amp;&amp; !SecurityUtil.isStrongPassword(newPassword))
	                        throw new PasswordIsNotStrongException();
		            }
		
		            try{
		                newPassword = SecurityUtil.encryptPassword(newPassword);
		                
		                user.setPassword(newPassword);
		            }
		            catch(InvalidResourcesException e){
		                throw new InternalErrorException(e);
		            }
		        }
		        
		        user.setLastUpdate(new DateTime());
		        
		        updateExpirePasswordDateTime(user);
				
				@{userServiceInterfaceName} service = getService(@{userModelName}.class);
				
				service.save(user);
			}
		}
	</artifact>
</artifacts>